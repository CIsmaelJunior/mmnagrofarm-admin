---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { getProduitBySlug, getAllProduits } from '../../data/produits';

export async function getStaticPaths() {
  const produits = getAllProduits();
  return produits.map((produit) => ({
    params: { slug: produit.slug },
    props: { produit },
  }));
}

const { produit } = Astro.props;

if (!produit) {
  return Astro.redirect('/404');
}
---

<Layout 
  title={`${produit.nom} ${produit.variete} - MMB AgroFarm`} 
  description={produit.description}
  image={produit.image}
>
  <Header />
  
  <!-- Indicateur de panier flottant -->
  <div id="cart-indicator" class="fixed top-24 right-6 z-50 hidden cursor-pointer" onclick="goToCart()">
    <div class="bg-white rounded-full shadow-2xl p-3 border border-gray-200 hover:shadow-3xl transition-all duration-300 transform hover:scale-110">
      <div class="relative">
        <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m6 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01" />
        </svg>
        <span id="cart-count" class="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center font-bold">0</span>
      </div>
    </div>
  </div>

  <!-- Breadcrumb -->
  <section class="pt-32 pb-8 bg-gray-50">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <nav class="flex items-center space-x-2 text-sm text-gray-600">
        <a href="/" class="hover:text-green-600 transition-colors duration-200">Accueil</a>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
        <a href="/produits" class="hover:text-green-600 transition-colors duration-200">Produits</a>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
        <span class="text-gray-900">{produit.nom}</span>
      </nav>
    </div>
  </section>

  <!-- Fiche Produit -->
  <section class="py-16">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-16">
        <!-- Image du produit -->
        <div class="space-y-4">
          <div class="aspect-square rounded-xl overflow-hidden shadow-2xl bg-white flex items-center justify-center">
            <img
              src={produit.image}
              alt={`${produit.nom} ${produit.variete}`}
              class="w-full h-full object-contain p-4"
            />
          </div>
        </div>

        <!-- Informations du produit -->
        <div class="space-y-8">
          <!-- Titre du produit -->
          <div>
            <h1 class="text-4xl font-bold text-gray-900 mb-8">
              {produit.nom}
            </h1>
          </div>

          <!-- Caractéristiques principales -->
          <div class="space-y-5">
            <!-- Origine -->
            <div class="bg-green-50 rounded-lg p-4 border border-green-100">
              <div class="flex items-center mb-2">
                <svg class="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                <h3 class="font-semibold text-gray-900">Origine</h3>
              </div>
              <p class="text-gray-700 ml-7">{produit.origine}</p>
            </div>

            <!-- Usage -->
            <div class="bg-green-50 rounded-lg p-4 border border-green-100">
              <div class="flex items-center mb-2">
                <svg class="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                </svg>
                <h3 class="font-semibold text-gray-900">Utilisation recommandée</h3>
              </div>
              <p class="text-gray-700 ml-7">{produit.usage}</p>
            </div>

            <!-- Bienfaits pour la santé -->
            <div class="bg-blue-50 rounded-lg p-4 border border-blue-100">
              <div class="flex items-center mb-3">
                <svg class="w-5 h-5 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
                <h3 class="font-semibold text-gray-900">Bienfaits pour la santé</h3>
              </div>
              <ul class="space-y-2 ml-7">
                {produit.bienfaits.map((bienfait) => (
                  <li class="flex items-start">
                    <svg class="w-4 h-4 text-green-600 mr-2 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="text-gray-700">{bienfait}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>

          <!-- Conditionnement -->
          <div class="space-y-8">
            <div>
              <h3 class="text-xl font-semibold text-gray-900 mb-4">Conditionnement disponible</h3>
            </div>
            
            <!-- Options de conditionnement -->
            <div class="flex flex-wrap gap-3">
              {produit.conditionnement.map((cond, index) => (
                <label class="group cursor-pointer">
                  <input
                    type="radio"
                    name="conditionnement"
                    value={cond}
                    class="sr-only"
                    data-conditionnement={cond}
                  />
                  <div class="relative px-6 py-4 border-2 border-gray-200 rounded-lg transition-all duration-300 hover:border-green-300 hover:shadow-md group-hover:scale-[1.02] bg-white min-w-[140px] text-center">
                    <div class="flex items-center justify-center mb-2">
                      <div class="w-5 h-5 border-2 border-gray-300 rounded-full flex items-center justify-center transition-all duration-200 group-hover:border-green-400">
                        <div class="w-2.5 h-2.5 bg-green-500 rounded-full opacity-0 scale-0 transition-all duration-200 transform"></div>
                      </div>
                    </div>
                    <div>
                      <span class="text-sm font-medium text-gray-700 group-hover:text-green-700 transition-colors duration-200">{cond}</span>
                    </div>
                    <div class="absolute inset-0 border-2 border-green-500 rounded-lg opacity-0 scale-95 transition-all duration-200 pointer-events-none"></div>
                  </div>
                </label>
              ))}
            </div>
            
            <!-- Sélection de quantité et ajout au panier -->
            <div class="p-4 bg-green-50 rounded-lg border border-green-100 hidden transform transition-all duration-300 opacity-0 scale-95" id="selection-info">
              <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                <div class="flex items-center">
                  <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center mr-3">
                    <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div>
                    <p class="text-sm font-medium text-green-800 mb-1">
                      Conditionnement sélectionné
                    </p>
                    <p class="text-lg font-semibold text-green-900" id="selected-conditionnement"></p>
                  </div>
                </div>
                
                <!-- Contrôles de quantité et bouton -->
                <div class="flex flex-col gap-4">
                  <div class="flex items-center space-x-3">
                    <label class="text-sm font-medium text-gray-700">Quantité:</label>
                    <div class="flex items-center border border-gray-300 rounded-lg bg-white">
                      <button 
                        type="button" 
                        class="px-3 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 transition-colors duration-200 rounded-l-lg"
                        onclick="decrementQuantity()"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                        </svg>
                      </button>
                      <input 
                        type="number" 
                        id="quantity-input"
                        min="1" 
                        value="1" 
                        class="w-16 text-center border-0 focus:ring-0 text-gray-900 font-medium bg-white"
                      />
                      <button 
                        type="button" 
                        class="px-3 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 transition-colors duration-200 rounded-r-lg"
                        onclick="incrementQuantity()"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                      </button>
                    </div>
                  </div>
                  
                  <!-- Bouton d'ajout au panier -->
                  <button 
                    onclick="addToCart()"
                    class="bg-green-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-green-700 transition-all duration-300 transform hover:scale-105 shadow-lg"
                  >
                    <div class="flex items-center justify-center">
                      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m6 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01" />
                      </svg>
                      Ajouter au panier
                    </div>
                  </button>
                </div>
              </div>
            </div>
          </div>

        </div>
      </div>
      
      <!-- CTA Section - Positionnée en bas, alignée avec l'image -->
      <div class="mt-12 flex flex-col sm:flex-row gap-4 justify-center items-center">
        <a
          href="/panier"
          class="inline-flex items-center justify-center px-8 py-4 text-lg font-semibold text-white bg-green-600 rounded-lg hover:bg-green-700 transition-colors duration-200 shadow-lg hover:shadow-xl"
        >
          Demander un devis
          <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </a>
        <a
          href="/produits"
          class="inline-flex items-center justify-center px-8 py-4 text-lg font-semibold text-green-600 border-2 border-green-600 rounded-lg hover:bg-green-600 hover:text-white transition-colors duration-200"
        >
          Voir tous les produits
        </a>
      </div>
    </div>
  </section>

  <!-- Produits similaires -->
  <section class="py-16 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <h2 class="text-3xl font-bold text-gray-900 text-center mb-12">
        Découvrez aussi
      </h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
        {getAllProduits()
          .filter(p => p.slug !== produit.slug)
          .slice(0, 3)
          .map((produitSimilaire) => (
            <a href={`/produits/${produitSimilaire.slug}`} class="group">
              <div class="bg-white rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-500 overflow-hidden transform hover:scale-105">
                <!-- Image avec overlay -->
                <div class="relative aspect-square overflow-hidden">
                  <img
                    src={produitSimilaire.image}
                    alt={`${produitSimilaire.nom} ${produitSimilaire.variete}`}
                    class="w-full h-full object-contain p-6 bg-white group-hover:scale-110 transition-transform duration-500"
                  />
                  <!-- Badge de type -->
                  <div class="absolute top-4 right-4">
                    <span class="bg-green-500 text-white px-3 py-1 rounded-full text-xs font-semibold uppercase tracking-wide">
                      {produitSimilaire.nom.toLowerCase().includes('melon') || produitSimilaire.nom.toLowerCase().includes('pasteque') ? 'Fruit' : 'Légume'}
                    </span>
                  </div>
                  <!-- Overlay au survol -->
                  <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </div>
                
                <!-- Contenu de la carte -->
                <div class="p-6">
                  <!-- Titre et variété -->
                  <div class="mb-4">
                    <h3 class="text-xl font-bold text-gray-900 mb-1 group-hover:text-green-600 transition-colors duration-300">
                      {produitSimilaire.nom}
                    </h3>
                    <p class="text-sm text-green-600 font-medium">
                      {produitSimilaire.variete}
                    </p>
                  </div>
                  
                  <!-- Origine -->
                  <div class="flex items-center mb-4">
                    <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3">
                      <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                    </div>
                    <span class="text-sm text-gray-600 font-medium">{produitSimilaire.origine}</span>
                  </div>
                  
                  <!-- Bienfaits (premiers 2) -->
                  <div class="space-y-2 mb-4">
                    {produitSimilaire.bienfaits.slice(0, 2).map((bienfait) => (
                      <div class="flex items-start">
                        <div class="w-5 h-5 bg-green-100 rounded-full flex items-center justify-center mr-2 mt-0.5 flex-shrink-0">
                          <svg class="w-3 h-3 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                          </svg>
                        </div>
                        <p class="text-xs text-gray-600 leading-relaxed">{bienfait}</p>
                      </div>
                    ))}
                  </div>
                  
                  <!-- Bouton d'action -->
                  <div class="flex items-center justify-between pt-4 border-t border-gray-100">
                    <span class="text-sm text-gray-500">Voir détails</span>
                    <svg class="w-5 h-5 text-green-600 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                  </div>
                </div>
              </div>
            </a>
          ))}
      </div>
    </div>
  </section>

  <Footer />
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

  <script>
    // Variables globales
    let currentQuantity = 1;
    let cart = JSON.parse(localStorage.getItem('mmb-cart') || '[]');
    
    // Initialisation au chargement de la page
    document.addEventListener('DOMContentLoaded', function() {
      updateCartIndicator();
      setupEventListeners();
      
      // Sélectionner le premier conditionnement par défaut
      const radioButtons = document.querySelectorAll('input[name="conditionnement"]');
      if (radioButtons.length > 0) {
        (radioButtons[0] as HTMLInputElement).checked = true;
        // Appeler updateSelection après un court délai pour s'assurer que le DOM est prêt
        setTimeout(() => {
          updateSelection();
        }, 100);
      }
    });

    // Configuration des écouteurs d'événements
    function setupEventListeners() {
      const radioButtons = document.querySelectorAll('input[name="conditionnement"]');
      const quantityInput = document.getElementById('quantity-input') as HTMLInputElement;
      
      if (quantityInput) {
        quantityInput.addEventListener('change', function() {
          currentQuantity = parseInt(this.value) || 1;
          if (currentQuantity < 1) {
            currentQuantity = 1;
            this.value = '1';
          }
        });
      }
    }

    // Fonction pour mettre à jour l'affichage
    function updateSelection() {
      const radioButtons = document.querySelectorAll('input[name="conditionnement"]');
      const selected = document.querySelector('input[name="conditionnement"]:checked') as HTMLInputElement;
      
      // D'abord, réinitialiser tous les styles
      radioButtons.forEach(radio => {
        const label = radio.closest('label');
        if (!label) return;
        
        const card = label.querySelector('.relative');
        const radioCircle = label.querySelector('.w-5.h-5.border-2');
        const radioDot = label.querySelector('.w-2\\.5.h-2\\.5.bg-green-500');
        const borderOverlay = label.querySelector('.absolute.inset-0');
        
        if (!card || !radioCircle || !radioDot || !borderOverlay) return;
        
        // Réinitialiser tous les styles
        card.classList.remove('border-green-500', 'shadow-lg');
        card.classList.add('border-gray-200');
        radioCircle.classList.remove('border-green-500');
        radioCircle.classList.add('border-gray-300');
        radioDot.classList.remove('opacity-100', 'scale-100');
        radioDot.classList.add('opacity-0', 'scale-0');
        borderOverlay.classList.remove('opacity-100', 'scale-100');
        borderOverlay.classList.add('opacity-0', 'scale-95');
      });
      
      if (selected) {
        // Afficher l'information de sélection avec animation
        const selectionInfo = document.getElementById('selection-info');
        const selectedConditionnement = document.getElementById('selected-conditionnement');
        
        if (selectedConditionnement) {
          selectedConditionnement.textContent = selected.value;
        }
        
        if (selectionInfo) {
          selectionInfo.classList.remove('hidden');
          // Délai pour permettre la transition
          setTimeout(() => {
            selectionInfo.classList.add('opacity-100', 'scale-100');
          }, 10);
        }
        
        // Appliquer le style à la carte sélectionnée
        const selectedLabel = selected.closest('label');
        if (selectedLabel) {
          const card = selectedLabel.querySelector('.relative');
          const radioCircle = selectedLabel.querySelector('.w-5.h-5.border-2');
          const radioDot = selectedLabel.querySelector('.w-2\\.5.h-2\\.5.bg-green-500');
          const borderOverlay = selectedLabel.querySelector('.absolute.inset-0');
          
          if (card && radioCircle && radioDot && borderOverlay) {
            // Carte sélectionnée
            card.classList.remove('border-gray-200');
            card.classList.add('border-green-500', 'shadow-lg');
            radioCircle.classList.remove('border-gray-300');
            radioCircle.classList.add('border-green-500');
            radioDot.classList.remove('opacity-0', 'scale-0');
            radioDot.classList.add('opacity-100', 'scale-100');
            borderOverlay.classList.remove('opacity-0', 'scale-95');
            borderOverlay.classList.add('opacity-100', 'scale-100');
          }
        }
      } else {
        // Cacher l'information de sélection avec animation
        const selectionInfo = document.getElementById('selection-info');
        if (selectionInfo) {
          selectionInfo.classList.remove('opacity-100', 'scale-100');
          setTimeout(() => {
            selectionInfo.classList.add('hidden');
          }, 300);
        }
      }
    }

    // Fonctions de gestion des quantités
    function incrementQuantity() {
      currentQuantity++;
      const quantityInput = document.getElementById('quantity-input') as HTMLInputElement;
      if (quantityInput) {
        quantityInput.value = currentQuantity.toString();
      }
    }

    function decrementQuantity() {
      if (currentQuantity > 1) {
        currentQuantity--;
        const quantityInput = document.getElementById('quantity-input') as HTMLInputElement;
        if (quantityInput) {
          quantityInput.value = currentQuantity.toString();
        }
      }
    }

    // Fonction d'ajout au panier
    function addToCart() {
      const selected = document.querySelector('input[name="conditionnement"]:checked') as HTMLInputElement;
      
      if (!selected) {
        alert('Veuillez sélectionner un conditionnement');
        return;
      }

      // Récupérer les informations du produit depuis le DOM
      const produitNom = document.querySelector('h1')?.textContent?.trim() || 'Produit';
      const produitVariete = document.querySelector('.text-xl.text-green-600')?.textContent?.trim() || '';
      const produitImage = document.querySelector('.aspect-square img')?.getAttribute('src') || '';
      const produitSlug = window.location.pathname.split('/').pop() || 'produit';

      const produitInfo = {
        id: `${produitSlug}-${selected.value}`,
        nom: produitNom,
        variete: produitVariete,
        conditionnement: selected.value,
        quantite: currentQuantity,
        image: produitImage,
        slug: produitSlug
      };

      // Vérifier si le produit est déjà dans le panier
      const existingIndex = cart.findIndex((item: any) => item.id === produitInfo.id);
      
      if (existingIndex !== -1) {
        // Mettre à jour la quantité
        cart[existingIndex].quantite += currentQuantity;
      } else {
        // Ajouter le nouveau produit
        cart.push(produitInfo);
      }

      // Sauvegarder dans le localStorage
      localStorage.setItem('mmb-cart', JSON.stringify(cart));
      
      // Mettre à jour l'indicateur de panier
      updateCartIndicator();
      
      // Afficher une confirmation
      showAddToCartConfirmation();
      
      // Réinitialiser la quantité
      currentQuantity = 1;
      const quantityInput = document.getElementById('quantity-input') as HTMLInputElement;
      if (quantityInput) {
        quantityInput.value = '1';
      }
    }

    // Fonction pour afficher la confirmation d'ajout au panier
    function showAddToCartConfirmation() {
      const selected = document.querySelector('input[name="conditionnement"]:checked') as HTMLInputElement;
      if (!selected) return;

      // Créer une notification temporaire
      const notification = document.createElement('div');
      notification.className = 'fixed top-32 right-6 bg-green-500 text-white px-6 py-3 rounded-lg shadow-2xl z-50 transform translate-x-full transition-transform duration-300';
      notification.innerHTML = `
        <div class="flex items-center space-x-2">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          <span>Ajouté au panier !</span>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Animer l'entrée
      setTimeout(() => {
        notification.classList.remove('translate-x-full');
      }, 100);
      
      // Supprimer après 3 secondes
      setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }

    // Fonction pour mettre à jour l'indicateur de panier
    function updateCartIndicator() {
      const cartIndicator = document.getElementById('cart-indicator');
      const cartCount = document.getElementById('cart-count');
      
      if (cartIndicator && cartCount) {
        const totalItems = cart.reduce((total: number, item: any) => total + item.quantite, 0);
        
        if (totalItems > 0) {
          cartIndicator.classList.remove('hidden');
          cartCount.textContent = totalItems.toString();
        } else {
          cartIndicator.classList.add('hidden');
        }
      }
    }

    // Fonction pour naviguer vers le panier
    function goToCart() {
      window.location.href = '/panier';
    }

    // Ajouter les écouteurs d'événements
    const radioButtons = document.querySelectorAll('input[name="conditionnement"]');
    radioButtons.forEach(radio => {
      radio.addEventListener('change', updateSelection);
      
      // Ajouter l'effet de survol
      const label = radio.closest('label');
      if (!label) return;
      
      label.addEventListener('mouseenter', function() {
        if (!(radio as HTMLInputElement).checked) {
          const card = this.querySelector('.relative');
          if (card) {
            card.classList.add('border-green-300');
          }
        }
      });
      
      label.addEventListener('mouseleave', function() {
        if (!(radio as HTMLInputElement).checked) {
          const card = this.querySelector('.relative');
          if (card) {
            card.classList.remove('border-green-300');
            card.classList.add('border-gray-200');
          }
        }
      });
    });

    // Rendre les fonctions globales
    (window as any).decrementQuantity = decrementQuantity;
    (window as any).incrementQuantity = incrementQuantity;
    (window as any).addToCart = addToCart;
    (window as any).goToCart = goToCart;
  </script>
